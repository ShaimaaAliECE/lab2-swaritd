{"ast":null,"code":"import _classCallCheck from\"/Users/swarit/code_projects/connect4-2.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/swarit/code_projects/connect4-2.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/swarit/code_projects/connect4-2.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/swarit/code_projects/connect4-2.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from'react';import'./index.css';import Square from'./square.js';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Board=/*#__PURE__*/function(_React$Component){_inherits(Board,_React$Component);var _super=_createSuper(Board);// initializes a 6 x 7 2-dimensional array of nulls to represent the board's values\nfunction Board(props){var _this;_classCallCheck(this,Board);_this=_super.call(this,props);_this.resetButton=function(){var squaresArray=Array(_this.wd);for(var i=0;i<_this.wd;i++){squaresArray[i]=Array(_this.ht).fill(null);}_this.setState({squares:squaresArray,p1IsNext:true,gameWon:false});};_this.ht=6;_this.wd=7;var _squaresArray=Array(_this.wd);for(var _i=0;_i<_this.wd;_i++){_squaresArray[_i]=Array(_this.ht).fill(null);}_this.state={squares:_squaresArray,p1IsNext:true,gameWon:false};return _this;}// this function looks at the board's values and determines if a player has won\n_createClass(Board,[{key:\"calculateWinner\",value:function calculateWinner(){var won=1;if(this.horizontalWinner()||this.verticalWinner()||this.diagonalWinner()){this.setState({gameWon:true});return won;}return!won;}// Checks for 4 consecutive same-colored discs in a row\n},{key:\"horizontalWinner\",value:function horizontalWinner(){var won=1;for(var row=0;row<this.ht;row++){for(var col=0;col<this.wd-3;col++){var disc=this.state.squares[col][row];if(disc!==null){if(this.state.squares[col+1][row]===disc&&this.state.squares[col+2][row]===disc&&this.state.squares[col+3][row]===disc){return won;}}}}return!won;}// Checks for 4 consecutive same-colored discs in a column\n},{key:\"verticalWinner\",value:function verticalWinner(){var won=1;for(var row=0;row<this.ht-3;row++){for(var col=0;col<this.wd;col++){var disc=this.state.squares[col][row];if(disc!==null){if(this.state.squares[col][row+1]===disc&&this.state.squares[col][row+2]===disc&&this.state.squares[col][row+3]===disc){return won;}}}}return!won;}// // Checks for 4 consecutive same-colored discs in a diagonal\n},{key:\"diagonalWinner\",value:function diagonalWinner(){var won=1;if(this.ascendingDiagonalWinner()||this.descendingDiagonalWinner()){return won;}return!won;}},{key:\"ascendingDiagonalWinner\",value:function ascendingDiagonalWinner(){var won=1;for(var row=0;row<this.ht-3;row++){for(var col=0;col<this.wd-3;col++){var disc=this.state.squares[col][row];if(disc!==null){if(this.state.squares[col+1][row+1]===disc&&this.state.squares[col+2][row+2]===disc&&this.state.squares[col+3][row+3]===disc){return won;}}}}return!won;}},{key:\"descendingDiagonalWinner\",value:function descendingDiagonalWinner(){var won=1;for(var row=this.ht-1;row>2;row--){for(var col=0;col<this.wd-3;col++){var disc=this.state.squares[col][row];if(disc!==null){if(this.state.squares[col+1][row-1]===disc&&this.state.squares[col+2][row-2]===disc&&this.state.squares[col+3][row-3]===disc){return won;}}}}return!won;}// int: col, column number in the board\n// int: row, row number in the board\n// renders a square in the board, used as a helper function in renderColumn\n},{key:\"renderSquare\",value:function renderSquare(col,row){return/*#__PURE__*/_jsx(Square,{number:col*6+row//if u want to look at what the board squares arrangement looks like,\n// replace props.value with props.number in square.js\n,value:this.state.squares[col][row]});}// int: col, column number for the board\n// finds the lowest unoccupied square in a given column\n},{key:\"findLowestSquare\",value:function findLowestSquare(col){var result=-1;for(var j=0;j<this.ht;j++){if(!this.state.squares[col][j]){result=j;return result;}}return result;}// int: col, the column number in the board\n// onclick function for each column in the board,\n// places a circle with a value depending on the next player,\n// will stop if winner is declared or the column is full\n},{key:\"handleClick\",value:function handleClick(col){if(!this.state.gameWon){var squares=this.state.squares.slice();var n=this.findLowestSquare(col);if(n!==-1){squares[col][n]=this.state.p1IsNext?'P1':'P2';if(!this.calculateWinner()){this.setState({squares:squares,p1IsNext:!this.state.p1IsNext});}}else{alert('Column is full');}}}// int: col, the column number in the board\n// renders a column in the board, called 7 times in the render function of the board\n},{key:\"renderColumn\",value:function renderColumn(col){var _this2=this;return/*#__PURE__*/_jsxs(\"div\",{className:\"board-column\",onClick:function onClick(){return _this2.handleClick(col);},children:[this.renderSquare(col,0),this.renderSquare(col,1),this.renderSquare(col,2),this.renderSquare(col,3),this.renderSquare(col,4),this.renderSquare(col,5)]});}// this function renders the board along with the buttons and information needed for the game\n},{key:\"render\",value:function render(){var _this3=this;var status;if(this.state.gameWon){status=(this.state.p1IsNext?'P1':'P2')+' is the winner!';}else{status='Next player: '+(this.state.p1IsNext?'P1':'P2');}var statusClass=this.state.p1IsNext?\"status1\":\"status2\";return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{className:statusClass,children:status}),/*#__PURE__*/_jsxs(\"div\",{className:\"board\",children:[this.renderColumn(0),this.renderColumn(1),this.renderColumn(2),this.renderColumn(3),this.renderColumn(4),this.renderColumn(5),this.renderColumn(6)]}),/*#__PURE__*/_jsxs(\"button\",{className:\"resetbutton\",onClick:function onClick(){return _this3.resetButton();},children:[\" \",\"Reset\",\" \"]})]});}}]);return Board;}(React.Component);export default Board;","map":{"version":3,"sources":["/Users/swarit/code_projects/connect4-2.0/src/board.js"],"names":["React","Square","Board","props","resetButton","squaresArray","Array","wd","i","ht","fill","setState","squares","p1IsNext","gameWon","state","won","horizontalWinner","verticalWinner","diagonalWinner","row","col","disc","ascendingDiagonalWinner","descendingDiagonalWinner","result","j","slice","n","findLowestSquare","calculateWinner","alert","handleClick","renderSquare","status","statusClass","renderColumn","Component"],"mappings":"4mBAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAO,aAAP,CACA,MAAOC,CAAAA,MAAP,KAAmB,aAAnB,C,2FAEMC,CAAAA,K,0GACJ;AACA,eAAYC,KAAZ,CAAmB,uCACjB,uBAAMA,KAAN,EADiB,MAiNnBC,WAjNmB,CAiNL,UAAM,CAClB,GAAIC,CAAAA,YAAY,CAAGC,KAAK,CAAC,MAAKC,EAAN,CAAxB,CACA,IAAI,GAAIC,CAAAA,CAAC,CAAG,CAAZ,CAAeA,CAAC,CAAG,MAAKD,EAAxB,CAA4BC,CAAC,EAA7B,CAAiC,CAC/BH,YAAY,CAACG,CAAD,CAAZ,CAAkBF,KAAK,CAAC,MAAKG,EAAN,CAAL,CAAeC,IAAf,CAAoB,IAApB,CAAlB,CACD,CACD,MAAKC,QAAL,CAAc,CACZC,OAAO,CAAEP,YADG,CAEZQ,QAAQ,CAAE,IAFE,CAGZC,OAAO,CAAE,KAHG,CAAd,EAKD,CA3NkB,CAEjB,MAAKL,EAAL,CAAU,CAAV,CACA,MAAKF,EAAL,CAAU,CAAV,CACA,GAAIF,CAAAA,aAAY,CAAGC,KAAK,CAAC,MAAKC,EAAN,CAAxB,CACA,IAAI,GAAIC,CAAAA,EAAC,CAAG,CAAZ,CAAeA,EAAC,CAAG,MAAKD,EAAxB,CAA4BC,EAAC,EAA7B,CAAiC,CAC/BH,aAAY,CAACG,EAAD,CAAZ,CAAkBF,KAAK,CAAC,MAAKG,EAAN,CAAL,CAAeC,IAAf,CAAoB,IAApB,CAAlB,CACD,CACD,MAAKK,KAAL,CAAa,CACTH,OAAO,CAAEP,aADA,CAETQ,QAAQ,CAAE,IAFD,CAGTC,OAAO,CAAE,KAHA,CAAb,CARiB,aAalB,CAED;iDACA,0BAAkB,CAEhB,GAAIE,CAAAA,GAAG,CAAG,CAAV,CAEA,GAAG,KAAKC,gBAAL,IAA2B,KAAKC,cAAL,EAA3B,EAAoD,KAAKC,cAAL,EAAvD,CACA,CACE,KAAKR,QAAL,CAAc,CACZG,OAAO,CAAE,IADG,CAAd,EAGA,MAAOE,CAAAA,GAAP,CACD,CAED,MAAO,CAACA,GAAR,CACD,CAED;gCACA,2BAAmB,CACjB,GAAIA,CAAAA,GAAG,CAAG,CAAV,CACA,IAAI,GAAII,CAAAA,GAAG,CAAG,CAAd,CAAiBA,GAAG,CAAG,KAAKX,EAA5B,CAAgCW,GAAG,EAAnC,CAAuC,CACrC,IAAI,GAAIC,CAAAA,GAAG,CAAG,CAAd,CAAiBA,GAAG,CAAG,KAAKd,EAAL,CAAU,CAAjC,CAAoCc,GAAG,EAAvC,CAA2C,CACzC,GAAIC,CAAAA,IAAI,CAAG,KAAKP,KAAL,CAAWH,OAAX,CAAmBS,GAAnB,EAAwBD,GAAxB,CAAX,CACA,GAAGE,IAAI,GAAK,IAAZ,CAAkB,CAChB,GAAG,KAAKP,KAAL,CAAWH,OAAX,CAAmBS,GAAG,CAAG,CAAzB,EAA4BD,GAA5B,IAAqCE,IAArC,EACE,KAAKP,KAAL,CAAWH,OAAX,CAAmBS,GAAG,CAAG,CAAzB,EAA4BD,GAA5B,IAAqCE,IADvC,EAEE,KAAKP,KAAL,CAAWH,OAAX,CAAmBS,GAAG,CAAG,CAAzB,EAA4BD,GAA5B,IAAqCE,IAF1C,CAEgD,CAC9C,MAAON,CAAAA,GAAP,CACD,CACF,CACF,CACF,CACD,MAAO,CAACA,GAAR,CACD,CAED;8BACA,yBAAiB,CACf,GAAIA,CAAAA,GAAG,CAAG,CAAV,CACA,IAAI,GAAII,CAAAA,GAAG,CAAG,CAAd,CAAiBA,GAAG,CAAG,KAAKX,EAAL,CAAU,CAAjC,CAAoCW,GAAG,EAAvC,CAA2C,CACzC,IAAI,GAAIC,CAAAA,GAAG,CAAG,CAAd,CAAiBA,GAAG,CAAG,KAAKd,EAA5B,CAAgCc,GAAG,EAAnC,CAAuC,CACrC,GAAIC,CAAAA,IAAI,CAAG,KAAKP,KAAL,CAAWH,OAAX,CAAmBS,GAAnB,EAAwBD,GAAxB,CAAX,CACA,GAAGE,IAAI,GAAK,IAAZ,CAAkB,CAChB,GAAG,KAAKP,KAAL,CAAWH,OAAX,CAAmBS,GAAnB,EAAwBD,GAAG,CAAG,CAA9B,IAAqCE,IAArC,EACE,KAAKP,KAAL,CAAWH,OAAX,CAAmBS,GAAnB,EAAwBD,GAAG,CAAG,CAA9B,IAAqCE,IADvC,EAEE,KAAKP,KAAL,CAAWH,OAAX,CAAmBS,GAAnB,EAAwBD,GAAG,CAAG,CAA9B,IAAqCE,IAF1C,CAEgD,CAC9C,MAAON,CAAAA,GAAP,CACD,CACF,CACF,CACF,CACD,MAAO,CAACA,GAAR,CACD,CAED;8BACF,yBAAiB,CACd,GAAIA,CAAAA,GAAG,CAAG,CAAV,CACA,GAAG,KAAKO,uBAAL,IAAkC,KAAKC,wBAAL,EAArC,CAAsE,CACpE,MAAOR,CAAAA,GAAP,CACD,CACD,MAAO,CAACA,GAAR,CACD,C,uCAEA,kCAA0B,CACxB,GAAIA,CAAAA,GAAG,CAAG,CAAV,CACA,IAAI,GAAII,CAAAA,GAAG,CAAG,CAAd,CAAiBA,GAAG,CAAG,KAAKX,EAAL,CAAU,CAAjC,CAAoCW,GAAG,EAAvC,CAA2C,CACzC,IAAI,GAAIC,CAAAA,GAAG,CAAG,CAAd,CAAiBA,GAAG,CAAG,KAAKd,EAAL,CAAU,CAAjC,CAAoCc,GAAG,EAAvC,CAA2C,CACzC,GAAIC,CAAAA,IAAI,CAAG,KAAKP,KAAL,CAAWH,OAAX,CAAmBS,GAAnB,EAAwBD,GAAxB,CAAX,CACA,GAAGE,IAAI,GAAK,IAAZ,CAAkB,CAChB,GAAG,KAAKP,KAAL,CAAWH,OAAX,CAAmBS,GAAG,CAAG,CAAzB,EAA4BD,GAAG,CAAG,CAAlC,IAAyCE,IAAzC,EACE,KAAKP,KAAL,CAAWH,OAAX,CAAmBS,GAAG,CAAG,CAAzB,EAA4BD,GAAG,CAAG,CAAlC,IAAyCE,IAD3C,EAEE,KAAKP,KAAL,CAAWH,OAAX,CAAmBS,GAAG,CAAG,CAAzB,EAA4BD,GAAG,CAAG,CAAlC,IAAyCE,IAF9C,CAEoD,CAClD,MAAON,CAAAA,GAAP,CACD,CACF,CACF,CACF,CACD,MAAO,CAACA,GAAR,CACD,C,wCAED,mCAA2B,CACzB,GAAIA,CAAAA,GAAG,CAAG,CAAV,CACA,IAAI,GAAII,CAAAA,GAAG,CAAG,KAAKX,EAAL,CAAU,CAAxB,CAA2BW,GAAG,CAAG,CAAjC,CAAoCA,GAAG,EAAvC,CAA2C,CACzC,IAAI,GAAIC,CAAAA,GAAG,CAAG,CAAd,CAAiBA,GAAG,CAAG,KAAKd,EAAL,CAAU,CAAjC,CAAoCc,GAAG,EAAvC,CAA2C,CACzC,GAAIC,CAAAA,IAAI,CAAG,KAAKP,KAAL,CAAWH,OAAX,CAAmBS,GAAnB,EAAwBD,GAAxB,CAAX,CACA,GAAGE,IAAI,GAAK,IAAZ,CAAkB,CAChB,GAAG,KAAKP,KAAL,CAAWH,OAAX,CAAmBS,GAAG,CAAG,CAAzB,EAA4BD,GAAG,CAAG,CAAlC,IAAyCE,IAAzC,EACE,KAAKP,KAAL,CAAWH,OAAX,CAAmBS,GAAG,CAAG,CAAzB,EAA4BD,GAAG,CAAG,CAAlC,IAAyCE,IAD3C,EAEE,KAAKP,KAAL,CAAWH,OAAX,CAAmBS,GAAG,CAAG,CAAzB,EAA4BD,GAAG,CAAG,CAAlC,IAAyCE,IAF9C,CAEoD,CAClD,MAAON,CAAAA,GAAP,CACD,CACF,CACF,CACF,CACD,MAAO,CAACA,GAAR,CACD,CAED;AACA;AACA;4BACA,sBAAaK,GAAb,CAAkBD,GAAlB,CAAuB,CACnB,mBACA,KAAC,MAAD,EACE,MAAM,CAAEC,GAAG,CAAG,CAAN,CAAUD,GAAK;AACA;AAFzB,CAGE,KAAK,CAAE,KAAKL,KAAL,CAAWH,OAAX,CAAmBS,GAAnB,EAAwBD,GAAxB,CAHT,EADA,CAOH,CAED;AACA;gCACA,0BAAiBC,GAAjB,CAAsB,CACpB,GAAII,CAAAA,MAAM,CAAG,CAAC,CAAd,CACA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAG,KAAKjB,EAAzB,CAA6BiB,CAAC,EAA9B,CAAkC,CAChC,GAAI,CAAC,KAAKX,KAAL,CAAWH,OAAX,CAAmBS,GAAnB,EAAwBK,CAAxB,CAAL,CAAiC,CAC/BD,MAAM,CAAGC,CAAT,CACA,MAAOD,CAAAA,MAAP,CACD,CACF,CACD,MAAOA,CAAAA,MAAP,CACD,CAED;AACA;AACA;AACA;2BACA,qBAAYJ,GAAZ,CAAiB,CACf,GAAG,CAAC,KAAKN,KAAL,CAAWD,OAAf,CAAwB,CACtB,GAAMF,CAAAA,OAAO,CAAG,KAAKG,KAAL,CAAWH,OAAX,CAAmBe,KAAnB,EAAhB,CACA,GAAIC,CAAAA,CAAC,CAAG,KAAKC,gBAAL,CAAsBR,GAAtB,CAAR,CAEA,GAAIO,CAAC,GAAK,CAAC,CAAX,CAAc,CACZhB,OAAO,CAACS,GAAD,CAAP,CAAaO,CAAb,EAAkB,KAAKb,KAAL,CAAWF,QAAX,CAAsB,IAAtB,CAA6B,IAA/C,CACA,GAAG,CAAC,KAAKiB,eAAL,EAAJ,CAA4B,CAC1B,KAAKnB,QAAL,CAAc,CACZC,OAAO,CAAEA,OADG,CAEZC,QAAQ,CAAE,CAAC,KAAKE,KAAL,CAAWF,QAFV,CAAd,EAID,CACF,CARD,IAWA,CACEkB,KAAK,CAAC,gBAAD,CAAL,CACD,CACF,CACF,CAED;AACA;4BACA,sBAAaV,GAAb,CAAkB,iBAChB,mBACE,aAAK,SAAS,CAAC,cAAf,CAA8B,OAAO,CAAE,yBAAM,CAAA,MAAI,CAACW,WAAL,CAAiBX,GAAjB,CAAN,EAAvC,WACO,KAAKY,YAAL,CAAkBZ,GAAlB,CAAuB,CAAvB,CADP,CAEO,KAAKY,YAAL,CAAkBZ,GAAlB,CAAuB,CAAvB,CAFP,CAGO,KAAKY,YAAL,CAAkBZ,GAAlB,CAAuB,CAAvB,CAHP,CAIO,KAAKY,YAAL,CAAkBZ,GAAlB,CAAuB,CAAvB,CAJP,CAKO,KAAKY,YAAL,CAAkBZ,GAAlB,CAAuB,CAAvB,CALP,CAMO,KAAKY,YAAL,CAAkBZ,GAAlB,CAAuB,CAAvB,CANP,GADF,CAUD,CAED;sBACA,iBAAS,iBACP,GAAIa,CAAAA,MAAJ,CACA,GAAG,KAAKnB,KAAL,CAAWD,OAAd,CAAuB,CACrBoB,MAAM,CAAG,CAAC,KAAKnB,KAAL,CAAWF,QAAX,CAAsB,IAAtB,CAA6B,IAA9B,EAAsC,iBAA/C,CACD,CAFD,IAEO,CACLqB,MAAM,CAAG,iBAAmB,KAAKnB,KAAL,CAAWF,QAAX,CAAsB,IAAtB,CAA6B,IAAhD,CAAT,CAED,CACD,GAAIsB,CAAAA,WAAW,CAAG,KAAKpB,KAAL,CAAWF,QAAX,CAAsB,SAAtB,CAAkC,SAApD,CAEA,mBACE,oCACE,YAAK,SAAS,CAAEsB,WAAhB,UAA8BD,MAA9B,EADF,cAEE,aAAK,SAAS,CAAC,OAAf,WAEC,KAAKE,YAAL,CAAkB,CAAlB,CAFD,CAGC,KAAKA,YAAL,CAAkB,CAAlB,CAHD,CAIC,KAAKA,YAAL,CAAkB,CAAlB,CAJD,CAKC,KAAKA,YAAL,CAAkB,CAAlB,CALD,CAMC,KAAKA,YAAL,CAAkB,CAAlB,CAND,CAOC,KAAKA,YAAL,CAAkB,CAAlB,CAPD,CAQC,KAAKA,YAAL,CAAkB,CAAlB,CARD,GAFF,cAaE,gBAAQ,SAAS,CAAC,aAAlB,CAAgC,OAAO,CAAE,yBAAM,CAAA,MAAI,CAAChC,WAAL,EAAN,EAAzC,WACG,GADH,SAEQ,GAFR,GAbF,GADF,CAoBD,C,mBAlNiBJ,KAAK,CAACqC,S,EAgO1B,cAAenC,CAAAA,KAAf","sourcesContent":["import React from 'react';\nimport './index.css';\nimport Square from './square.js';\n\nclass Board extends React.Component {\n  // initializes a 6 x 7 2-dimensional array of nulls to represent the board's values\n  constructor(props) {\n    super(props);\n    this.ht = 6;\n    this.wd = 7;\n    var squaresArray = Array(this.wd);\n    for(var i = 0; i < this.wd; i++) {\n      squaresArray[i] = Array(this.ht).fill(null);\n    }\n    this.state = {\n        squares: squaresArray,\n        p1IsNext: true,\n        gameWon: false\n    };\n  }\n\n  // this function looks at the board's values and determines if a player has won\n  calculateWinner() {\n\n    let won = 1;\n\n    if(this.horizontalWinner() || this.verticalWinner() || this.diagonalWinner()) \n    {\n      this.setState({\n        gameWon: true\n      });\n      return won;\n    }\n\n    return !won;\n  }\n\n  // Checks for 4 consecutive same-colored discs in a row\n  horizontalWinner() {\n    let won = 1;\n    for(let row = 0; row < this.ht; row++) {\n      for(let col = 0; col < this.wd - 3; col++) {\n        let disc = this.state.squares[col][row];\n        if(disc !== null) {\n          if(this.state.squares[col + 1][row] === disc\n            && this.state.squares[col + 2][row] === disc\n            && this.state.squares[col + 3][row] === disc) {\n            return won;\n          }\n        }\n      }\n    }\n    return !won;\n  }\n\n  // Checks for 4 consecutive same-colored discs in a column\n  verticalWinner() {\n    let won = 1;\n    for(let row = 0; row < this.ht - 3; row++) {\n      for(let col = 0; col < this.wd; col++) {\n        let disc = this.state.squares[col][row];\n        if(disc !== null) {\n          if(this.state.squares[col][row + 1] === disc\n            && this.state.squares[col][row + 2] === disc\n            && this.state.squares[col][row + 3] === disc) {\n            return won;\n          }\n        }\n      }\n    }\n    return !won;\n  }\n\n  // // Checks for 4 consecutive same-colored discs in a diagonal\ndiagonalWinner() {\n   let won = 1;\n   if(this.ascendingDiagonalWinner() || this.descendingDiagonalWinner()) {\n     return won;\n   }\n   return !won;\n }\n\n  ascendingDiagonalWinner() {\n    let won = 1;\n    for(let row = 0; row < this.ht - 3; row++) {\n      for(let col = 0; col < this.wd - 3; col++) {\n        let disc = this.state.squares[col][row];\n        if(disc !== null) {\n          if(this.state.squares[col + 1][row + 1] === disc\n            && this.state.squares[col + 2][row + 2] === disc\n            && this.state.squares[col + 3][row + 3] === disc) {\n            return won;\n          }\n        }\n      }\n    }\n    return !won;\n  }\n\n  descendingDiagonalWinner() {\n    let won = 1;\n    for(let row = this.ht - 1; row > 2; row--) {\n      for(let col = 0; col < this.wd - 3; col++) {\n        let disc = this.state.squares[col][row];\n        if(disc !== null) {\n          if(this.state.squares[col + 1][row - 1] === disc\n            && this.state.squares[col + 2][row - 2] === disc\n            && this.state.squares[col + 3][row - 3] === disc) {\n            return won;\n          }\n        }\n      }\n    }\n    return !won;\n  }\n\n  // int: col, column number in the board\n  // int: row, row number in the board\n  // renders a square in the board, used as a helper function in renderColumn\n  renderSquare(col, row) {\n      return (\n      <Square\n        number={col * 6 + row} //if u want to look at what the board squares arrangement looks like,\n                               // replace props.value with props.number in square.js\n        value={this.state.squares[col][row]}\n      />\n    );\n  }\n\n  // int: col, column number for the board\n  // finds the lowest unoccupied square in a given column\n  findLowestSquare(col) {\n    let result = -1;\n    for (let j = 0; j < this.ht; j++) {\n      if (!this.state.squares[col][j]) {\n        result = j;\n        return result;\n      }\n    }\n    return result;\n  }\n\n  // int: col, the column number in the board\n  // onclick function for each column in the board,\n  // places a circle with a value depending on the next player,\n  // will stop if winner is declared or the column is full\n  handleClick(col) {\n    if(!this.state.gameWon) {\n      const squares = this.state.squares.slice();\n      let n = this.findLowestSquare(col);\n\n      if (n !== -1) {\n        squares[col][n] = this.state.p1IsNext ? 'P1' : 'P2';\n        if(!this.calculateWinner()) {\n          this.setState({\n            squares: squares,\n            p1IsNext: !this.state.p1IsNext,\n          });\n        }\n      }\n\n      else\n      {\n        alert('Column is full');\n      }\n    }\n  }\n\n  // int: col, the column number in the board\n  // renders a column in the board, called 7 times in the render function of the board\n  renderColumn(col) {\n    return (\n      <div className=\"board-column\" onClick={() => this.handleClick(col)}>\n            {this.renderSquare(col, 0)}\n            {this.renderSquare(col, 1)}\n            {this.renderSquare(col, 2)}\n            {this.renderSquare(col, 3)}\n            {this.renderSquare(col, 4)}\n            {this.renderSquare(col, 5)}\n      </div>\n    )\n  }\n\n  // this function renders the board along with the buttons and information needed for the game\n  render() {\n    let status;\n    if(this.state.gameWon) {\n      status = (this.state.p1IsNext ? 'P1' : 'P2') + ' is the winner!';\n    } else {\n      status = 'Next player: ' + (this.state.p1IsNext ? 'P1' : 'P2');\n\n    }\n    let statusClass = this.state.p1IsNext ? \"status1\" : \"status2\";\n\n    return (\n      <div>\n        <div className={statusClass}>{status}</div>\n        <div className=\"board\">\n\n        {this.renderColumn(0)}\n        {this.renderColumn(1)}\n        {this.renderColumn(2)}\n        {this.renderColumn(3)}\n        {this.renderColumn(4)}\n        {this.renderColumn(5)}\n        {this.renderColumn(6)}\n\n        </div>\n        <button className=\"resetbutton\" onClick={() => this.resetButton()}>\n          {\" \"}\n          Reset{\" \"}\n        </button>\n      </div>\n    );\n  }\n  resetButton = () => {\n    var squaresArray = Array(this.wd);\n    for(var i = 0; i < this.wd; i++) {\n      squaresArray[i] = Array(this.ht).fill(null);\n    }\n    this.setState({\n      squares: squaresArray,\n      p1IsNext: true,\n      gameWon: false\n    });\n  };\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}