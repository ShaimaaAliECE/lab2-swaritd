{"ast":null,"code":"var _jsxFileName = \"/Users/swarit/code_projects/connect4-2.0/src/board.js\";\nimport React from 'react';\nimport './index.css';\nimport Square from './square.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Board extends React.Component {\n  // initializes a 6 x 7 2-dimensional array of nulls to represent the board's values\n  constructor(props) {\n    super(props);\n\n    this.resetButton = () => {\n      var squaresArray = Array(this.wd);\n\n      for (var i = 0; i < this.wd; i++) {\n        squaresArray[i] = Array(this.ht).fill(null);\n      }\n\n      this.setState({\n        squares: squaresArray,\n        p1IsNext: true,\n        gameWon: false\n      });\n    };\n\n    this.ht = 6;\n    this.wd = 7;\n\n    var _squaresArray = Array(this.wd);\n\n    for (var _i = 0; _i < this.wd; _i++) {\n      _squaresArray[_i] = Array(this.ht).fill(null);\n    }\n\n    this.state = {\n      squares: _squaresArray,\n      p1IsNext: true,\n      gameWon: false\n    };\n  } // this function looks at the board's values and determines if a player has won\n\n\n  calculateWinner() {\n    let won = 1;\n\n    if (this.horizontalWinner() || this.verticalWinner() || this.diagonalWinner()) {\n      this.setState({\n        gameWon: true\n      });\n      return won;\n    }\n\n    return !won;\n  } // Checks for 4 consecutive same-colored discs in a row\n\n\n  horizontalWinner() {\n    let won = 1;\n\n    for (let row = 0; row < this.ht; row++) {\n      for (let col = 0; col < this.wd - 3; col++) {\n        let disc = this.state.squares[col][row];\n\n        if (disc !== null) {\n          if (this.state.squares[col + 1][row] === disc && this.state.squares[col + 2][row] === disc && this.state.squares[col + 3][row] === disc) {\n            return won;\n          }\n        }\n      }\n    }\n\n    return !won;\n  } // Checks for 4 consecutive same-colored discs in a column\n\n\n  verticalWinner() {\n    let won = 1;\n\n    for (let row = 0; row < this.ht - 3; row++) {\n      for (let col = 0; col < this.wd; col++) {\n        let disc = this.state.squares[col][row];\n\n        if (disc !== null) {\n          if (this.state.squares[col][row + 1] === disc && this.state.squares[col][row + 2] === disc && this.state.squares[col][row + 3] === disc) {\n            return won;\n          }\n        }\n      }\n    }\n\n    return !won;\n  } // // Checks for 4 consecutive same-colored discs in a diagonal\n\n\n  diagonalWinner() {\n    let won = 1;\n\n    if (this.ascendingDiagonalWinner() || this.descendingDiagonalWinner()) {\n      return won;\n    }\n\n    return !won;\n  }\n\n  ascendingDiagonalWinner() {\n    let won = 1;\n\n    for (let row = 0; row < this.ht - 3; row++) {\n      for (let col = 0; col < this.wd - 3; col++) {\n        let disc = this.state.squares[col][row];\n\n        if (disc !== null) {\n          if (this.state.squares[col + 1][row + 1] === disc && this.state.squares[col + 2][row + 2] === disc && this.state.squares[col + 3][row + 3] === disc) {\n            return won;\n          }\n        }\n      }\n    }\n\n    return !won;\n  }\n\n  descendingDiagonalWinner() {\n    let won = 1;\n\n    for (let row = this.ht - 1; row > 2; row--) {\n      for (let col = 0; col < this.wd - 3; col++) {\n        let disc = this.state.squares[col][row];\n\n        if (disc !== null) {\n          if (this.state.squares[col + 1][row - 1] === disc && this.state.squares[col + 2][row - 2] === disc && this.state.squares[col + 3][row - 3] === disc) {\n            return won;\n          }\n        }\n      }\n    }\n\n    return !won;\n  } // int: col, column number in the board\n  // int: row, row number in the board\n  // renders a square in the board, used as a helper function in renderColumn\n\n\n  renderSquare(col, row) {\n    return /*#__PURE__*/_jsxDEV(Square, {\n      number: col * 6 + row //if u want to look at what the board squares arrangement looks like,\n      // replace props.value with props.number in square.js\n      ,\n      value: this.state.squares[col][row]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this);\n  } // int: col, column number for the board\n  // finds the lowest unoccupied square in a given column\n\n\n  findLowestSquare(col) {\n    let result = -1;\n\n    for (let j = 0; j < this.ht; j++) {\n      if (!this.state.squares[col][j]) {\n        result = j;\n        return result;\n      }\n    }\n\n    return result;\n  } // int: col, the column number in the board\n  // onclick function for each column in the board,\n  // places a circle with a value depending on the next player,\n  // will stop if winner is declared or the column is full\n\n\n  handleClick(col) {\n    if (!this.state.gameWon) {\n      const squares = this.state.squares.slice();\n      let n = this.findLowestSquare(col);\n\n      if (n !== -1) {\n        squares[col][n] = this.state.p1IsNext ? 'P1' : 'P2';\n\n        if (!this.calculateWinner()) {\n          this.setState({\n            squares: squares,\n            p1IsNext: !this.state.p1IsNext\n          });\n        }\n      } else {\n        alert('Column is full');\n      }\n    }\n  } // int: col, the column number in the board\n  // renders a column in the board, called 7 times in the render function of the board\n\n\n  renderColumn(col) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-column\",\n      onClick: () => this.handleClick(col),\n      children: [this.renderSquare(col, 0), this.renderSquare(col, 1), this.renderSquare(col, 2), this.renderSquare(col, 3), this.renderSquare(col, 4), this.renderSquare(col, 5)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this);\n  } // this function renders the board along with the buttons and information needed for the game\n\n\n  render() {\n    let status;\n\n    if (this.state.gameWon) {\n      status = (this.state.p1IsNext ? 'P1' : 'P2') + ' is the winner!';\n    } else {\n      status = 'Next player: ' + (this.state.p1IsNext ? 'P1' : 'P2');\n    }\n\n    let statusClass = this.state.p1IsNext ? \"status1\" : \"status2\";\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: statusClass,\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        children: [this.renderColumn(0), this.renderColumn(1), this.renderColumn(2), this.renderColumn(3), this.renderColumn(4), this.renderColumn(5), this.renderColumn(6)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"resetbutton\",\n        onClick: () => this.resetButton(),\n        children: [\" \", \"Reset\", \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/swarit/code_projects/connect4-2.0/src/board.js"],"names":["React","Square","Board","Component","constructor","props","resetButton","squaresArray","Array","wd","i","ht","fill","setState","squares","p1IsNext","gameWon","state","calculateWinner","won","horizontalWinner","verticalWinner","diagonalWinner","row","col","disc","ascendingDiagonalWinner","descendingDiagonalWinner","renderSquare","findLowestSquare","result","j","handleClick","slice","n","alert","renderColumn","render","status","statusClass"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './index.css';\nimport Square from './square.js';\n\nclass Board extends React.Component {\n  // initializes a 6 x 7 2-dimensional array of nulls to represent the board's values\n  constructor(props) {\n    super(props);\n    this.ht = 6;\n    this.wd = 7;\n    var squaresArray = Array(this.wd);\n    for(var i = 0; i < this.wd; i++) {\n      squaresArray[i] = Array(this.ht).fill(null);\n    }\n    this.state = {\n        squares: squaresArray,\n        p1IsNext: true,\n        gameWon: false\n    };\n  }\n\n  // this function looks at the board's values and determines if a player has won\n  calculateWinner() {\n\n    let won = 1;\n\n    if(this.horizontalWinner() || this.verticalWinner() || this.diagonalWinner()) \n    {\n      this.setState({\n        gameWon: true\n      });\n      return won;\n    }\n\n    return !won;\n  }\n\n  // Checks for 4 consecutive same-colored discs in a row\n  horizontalWinner() {\n    let won = 1;\n    for(let row = 0; row < this.ht; row++) {\n      for(let col = 0; col < this.wd - 3; col++) {\n        let disc = this.state.squares[col][row];\n        if(disc !== null) {\n          if(this.state.squares[col + 1][row] === disc\n            && this.state.squares[col + 2][row] === disc\n            && this.state.squares[col + 3][row] === disc) {\n            return won;\n          }\n        }\n      }\n    }\n    return !won;\n  }\n\n  // Checks for 4 consecutive same-colored discs in a column\n  verticalWinner() {\n    let won = 1;\n    for(let row = 0; row < this.ht - 3; row++) {\n      for(let col = 0; col < this.wd; col++) {\n        let disc = this.state.squares[col][row];\n        if(disc !== null) {\n          if(this.state.squares[col][row + 1] === disc\n            && this.state.squares[col][row + 2] === disc\n            && this.state.squares[col][row + 3] === disc) {\n            return won;\n          }\n        }\n      }\n    }\n    return !won;\n  }\n\n  // // Checks for 4 consecutive same-colored discs in a diagonal\ndiagonalWinner() {\n   let won = 1;\n   if(this.ascendingDiagonalWinner() || this.descendingDiagonalWinner()) {\n     return won;\n   }\n   return !won;\n }\n\n  ascendingDiagonalWinner() {\n    let won = 1;\n    for(let row = 0; row < this.ht - 3; row++) {\n      for(let col = 0; col < this.wd - 3; col++) {\n        let disc = this.state.squares[col][row];\n        if(disc !== null) {\n          if(this.state.squares[col + 1][row + 1] === disc\n            && this.state.squares[col + 2][row + 2] === disc\n            && this.state.squares[col + 3][row + 3] === disc) {\n            return won;\n          }\n        }\n      }\n    }\n    return !won;\n  }\n\n  descendingDiagonalWinner() {\n    let won = 1;\n    for(let row = this.ht - 1; row > 2; row--) {\n      for(let col = 0; col < this.wd - 3; col++) {\n        let disc = this.state.squares[col][row];\n        if(disc !== null) {\n          if(this.state.squares[col + 1][row - 1] === disc\n            && this.state.squares[col + 2][row - 2] === disc\n            && this.state.squares[col + 3][row - 3] === disc) {\n            return won;\n          }\n        }\n      }\n    }\n    return !won;\n  }\n\n  // int: col, column number in the board\n  // int: row, row number in the board\n  // renders a square in the board, used as a helper function in renderColumn\n  renderSquare(col, row) {\n      return (\n      <Square\n        number={col * 6 + row} //if u want to look at what the board squares arrangement looks like,\n                               // replace props.value with props.number in square.js\n        value={this.state.squares[col][row]}\n      />\n    );\n  }\n\n  // int: col, column number for the board\n  // finds the lowest unoccupied square in a given column\n  findLowestSquare(col) {\n    let result = -1;\n    for (let j = 0; j < this.ht; j++) {\n      if (!this.state.squares[col][j]) {\n        result = j;\n        return result;\n      }\n    }\n    return result;\n  }\n\n  // int: col, the column number in the board\n  // onclick function for each column in the board,\n  // places a circle with a value depending on the next player,\n  // will stop if winner is declared or the column is full\n  handleClick(col) {\n    if(!this.state.gameWon) {\n      const squares = this.state.squares.slice();\n      let n = this.findLowestSquare(col);\n      if (n !== -1) {\n        squares[col][n] = this.state.p1IsNext ? 'P1' : 'P2';\n        if(!this.calculateWinner()) {\n          this.setState({\n            squares: squares,\n            p1IsNext: !this.state.p1IsNext,\n          });\n        }\n      }\n      else\n      {\n        alert('Column is full');\n      }\n    }\n  }\n\n  // int: col, the column number in the board\n  // renders a column in the board, called 7 times in the render function of the board\n  renderColumn(col) {\n    return (\n      <div className=\"board-column\" onClick={() => this.handleClick(col)}>\n            {this.renderSquare(col, 0)}\n            {this.renderSquare(col, 1)}\n            {this.renderSquare(col, 2)}\n            {this.renderSquare(col, 3)}\n            {this.renderSquare(col, 4)}\n            {this.renderSquare(col, 5)}\n      </div>\n    )\n  }\n\n  // this function renders the board along with the buttons and information needed for the game\n  render() {\n    let status;\n    if(this.state.gameWon) {\n      status = (this.state.p1IsNext ? 'P1' : 'P2') + ' is the winner!';\n    } else {\n      status = 'Next player: ' + (this.state.p1IsNext ? 'P1' : 'P2');\n\n    }\n    let statusClass = this.state.p1IsNext ? \"status1\" : \"status2\";\n\n    return (\n      <div>\n        <div className={statusClass}>{status}</div>\n        <div className=\"board\">\n\n        {this.renderColumn(0)}\n        {this.renderColumn(1)}\n        {this.renderColumn(2)}\n        {this.renderColumn(3)}\n        {this.renderColumn(4)}\n        {this.renderColumn(5)}\n        {this.renderColumn(6)}\n\n        </div>\n        <button className=\"resetbutton\" onClick={() => this.resetButton()}>\n          {\" \"}\n          Reset{\" \"}\n        </button>\n      </div>\n    );\n  }\n  resetButton = () => {\n    var squaresArray = Array(this.wd);\n    for(var i = 0; i < this.wd; i++) {\n      squaresArray[i] = Array(this.ht).fill(null);\n    }\n    this.setState({\n      squares: squaresArray,\n      p1IsNext: true,\n      gameWon: false\n    });\n  };\n}\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}