{"version":3,"sources":["square.js","board.js","index.js"],"names":["Square","props","currSquare","document","getElementById","number","value","classList","add","remove","className","id","Board","resetButton","squaresArray","Array","wd","i","ht","fill","setState","squares","p1IsNext","gameWon","state","this","horizontalWinner","verticalWinner","diagonalWinner","row","col","disc","ascendingDiagonalWinner","descendingDiagonalWinner","result","j","slice","n","findLowestSquare","calculateWinner","alert","onClick","handleClick","renderSquare","status","statusClass","renderColumn","React","Component","Game","ReactDOM","render"],"mappings":"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","file":"static/js/main.a326c614.chunk.js","sourcesContent":["import React from 'react';\nimport './index.css';\n\n// function react component for squares in the board where each square has an id so we can reference it for actions\n\nfunction Square(props) {\n\n  var currSquare = document.getElementById(props.number);\n\n  if (props.value === 'P1')\n  {\n    currSquare.classList.add(\"circle1\");\n  }\n\n  else if (props.value === 'P2')\n  {\n    currSquare.classList.add(\"circle2\");\n  }\n\n  else\n  {\n    // to remove all chips\n    if (currSquare != null)\n    {\n      currSquare.classList.remove('circle1');\n      currSquare.classList.remove('circle2');\n    }\n  }\n\n    return (\n      <button className=\"square\">\n      <span id={props.number}></span>\n      </button>\n    );\n}\n\nexport default Square;","import React from 'react';\nimport './index.css';\nimport Square from './square.js';\n\nclass Board extends React.Component {\n  // initializes a 6 x 7 2-dimensional array of nulls to represent the board's values\n  constructor(props) {\n    super(props);\n    this.ht = 6;\n    this.wd = 7;\n    var squaresArray = Array(this.wd);\n    for(var i = 0; i < this.wd; i++) {\n      squaresArray[i] = Array(this.ht).fill(null);\n    }\n    this.state = {\n        squares: squaresArray,\n        p1IsNext: true,\n        gameWon: false\n    };\n  }\n\n  // this function looks at the board's values and determines if a player has won\n  calculateWinner() {\n\n    let won = 1;\n\n    if(this.horizontalWinner() || this.verticalWinner() || this.diagonalWinner()) \n    {\n      this.setState({\n        gameWon: true\n      });\n      return won;\n    }\n\n    return !won;\n  }\n\n  // Checks for 4 consecutive same-colored discs in a row\n  horizontalWinner() {\n    let won = 1;\n    for(let row = 0; row < this.ht; row++) {\n      for(let col = 0; col < this.wd - 3; col++) {\n        let disc = this.state.squares[col][row];\n        if(disc !== null) {\n          if(this.state.squares[col + 1][row] === disc\n            && this.state.squares[col + 2][row] === disc\n            && this.state.squares[col + 3][row] === disc) {\n            return won;\n          }\n        }\n      }\n    }\n    return !won;\n  }\n\n  // Checks for 4 consecutive same-colored discs in a column\n  verticalWinner() {\n    let won = 1;\n    for(let row = 0; row < this.ht - 3; row++) {\n      for(let col = 0; col < this.wd; col++) {\n        let disc = this.state.squares[col][row];\n        if(disc !== null) {\n          if(this.state.squares[col][row + 1] === disc\n            && this.state.squares[col][row + 2] === disc\n            && this.state.squares[col][row + 3] === disc) {\n            return won;\n          }\n        }\n      }\n    }\n    return !won;\n  }\n\n  // // Checks for 4 consecutive same-colored discs in a diagonal\ndiagonalWinner() {\n   let won = 1;\n   if(this.ascendingDiagonalWinner() || this.descendingDiagonalWinner()) {\n     return won;\n   }\n   return !won;\n }\n\n  ascendingDiagonalWinner() {\n    let won = 1;\n    for(let row = 0; row < this.ht - 3; row++) {\n      for(let col = 0; col < this.wd - 3; col++) {\n        let disc = this.state.squares[col][row];\n        if(disc !== null) {\n          if(this.state.squares[col + 1][row + 1] === disc\n            && this.state.squares[col + 2][row + 2] === disc\n            && this.state.squares[col + 3][row + 3] === disc) {\n            return won;\n          }\n        }\n      }\n    }\n    return !won;\n  }\n\n  descendingDiagonalWinner() {\n    let won = 1;\n    for(let row = this.ht - 1; row > 2; row--) {\n      for(let col = 0; col < this.wd - 3; col++) {\n        let disc = this.state.squares[col][row];\n        if(disc !== null) {\n          if(this.state.squares[col + 1][row - 1] === disc\n            && this.state.squares[col + 2][row - 2] === disc\n            && this.state.squares[col + 3][row - 3] === disc) {\n            return won;\n          }\n        }\n      }\n    }\n    return !won;\n  }\n\n  // int: col, column number in the board\n  // int: row, row number in the board\n  // renders a square in the board, used as a helper function in renderColumn\n  renderSquare(col, row) {\n      return (\n      <Square\n        number={col * 6 + row} //if u want to look at what the board squares arrangement looks like,\n                               // replace props.value with props.number in square.js\n        value={this.state.squares[col][row]}\n      />\n    );\n  }\n\n  // int: col, column number for the board\n  // finds the lowest unoccupied square in a given column\n  findLowestSquare(col) {\n    let result = -1;\n    for (let j = 0; j < this.ht; j++) {\n      if (!this.state.squares[col][j]) {\n        result = j;\n        return result;\n      }\n    }\n    return result;\n  }\n\n  // int: col, the column number in the board\n  // onclick function for each column in the board,\n  // places a circle with a value depending on the next player,\n  // will stop if winner is declared or the column is full\n  handleClick(col) {\n    if(!this.state.gameWon) {\n      const squares = this.state.squares.slice();\n      let n = this.findLowestSquare(col);\n\n      if (n !== -1) {\n        squares[col][n] = this.state.p1IsNext ? 'P1' : 'P2';\n        if(!this.calculateWinner()) {\n          this.setState({\n            squares: squares,\n            p1IsNext: !this.state.p1IsNext,\n          });\n        }\n      }\n\n      else\n      {\n        alert('Column is full');\n      }\n    }\n  }\n\n  // int: col, the column number in the board\n  // renders a column in the board, called 7 times in the render function of the board\n  renderColumn(col) {\n    return (\n      <div className=\"board-column\" onClick={() => this.handleClick(col)}>\n            {this.renderSquare(col, 0)}\n            {this.renderSquare(col, 1)}\n            {this.renderSquare(col, 2)}\n            {this.renderSquare(col, 3)}\n            {this.renderSquare(col, 4)}\n            {this.renderSquare(col, 5)}\n      </div>\n    )\n  }\n\n  // this function renders the board along with the buttons and information needed for the game\n  render() {\n    let status;\n    if(this.state.gameWon) {\n      status = (this.state.p1IsNext ? 'P1' : 'P2') + ' is the winner!';\n    } else {\n      status = 'Next player: ' + (this.state.p1IsNext ? 'P1' : 'P2');\n\n    }\n    let statusClass = this.state.p1IsNext ? \"status1\" : \"status2\";\n\n    return (\n      <div>\n        <div className={statusClass}>{status}</div>\n        <div className=\"board\">\n\n        {this.renderColumn(0)}\n        {this.renderColumn(1)}\n        {this.renderColumn(2)}\n        {this.renderColumn(3)}\n        {this.renderColumn(4)}\n        {this.renderColumn(5)}\n        {this.renderColumn(6)}\n\n        </div>\n        <button className=\"resetbutton\" onClick={() => this.resetButton()}>\n          {\" \"}\n          Reset{\" \"}\n        </button>\n      </div>\n    );\n  }\n  resetButton = () => {\n    var squaresArray = Array(this.wd);\n    for(var i = 0; i < this.wd; i++) {\n      squaresArray[i] = Array(this.ht).fill(null);\n    }\n    this.setState({\n      squares: squaresArray,\n      p1IsNext: true,\n      gameWon: false\n    });\n  };\n}\n\nexport default Board;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Board from \"./board.js\";\n\nclass Game extends React.Component {\n  render() {\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board />\n        </div>\n        <div className=\"game-info\">\n          <div>{}</div>\n          <ol>{}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));"],"sourceRoot":""}